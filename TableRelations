CREATE DATABASE DBRelations;

--1.One-To-One Relationship
CREATE TABLE Passports (
    PassportID int IDENTITY(101,1) PRIMARY KEY,
    PassportNumber varchar(100)
);

CREATE TABLE Persons (
    PersonID INT NOT NULL,
    FirstName VARCHAR(50),
    Salary DECIMAL(10, 2),
    PassportID INT,
    PRIMARY KEY (PersonID)
);

INSERT INTO Passports ( PassportNumber)
VALUES 
    ( 'N34FG21B'),
    ( 'K65LO4R7'),
    ( 'ZE657QP2');


INSERT INTO Persons (PersonID, FirstName, Salary, PassportID)
VALUES 
    (1, 'Roberto', 43300.00, 102),
    (2, 'Tom', 56100.00, 103),
    (3, 'Yana', 60200.00, 101);

ALTER TABLE Persons
ADD CONSTRAINT FK_PassportID FOREIGN KEY (PassportID) REFERENCES Passports(PassportID);

--2.One-To-Many Relationship
CREATE TABLE Manufacturers (
    ManufacturerID INT NOT NULL PRIMARY KEY,
    Name VARCHAR(50),
    EstablishedOn DATE
);


CREATE TABLE Models (
    ModelID INT NOT NULL PRIMARY KEY,
    Name VARCHAR(50),
    ManufacturerID INT,
    FOREIGN KEY (ManufacturerID) REFERENCES Manufacturers(ManufacturerID)
);


INSERT INTO Manufacturers (ManufacturerID, Name, EstablishedOn)
VALUES 
    (1, 'BMW', '1916-07-03'),
    (2, 'Tesla', '2003-01-01'),
    (3, 'Lada', '1966-01-05');


INSERT INTO Models (ModelID, Name, ManufacturerID)
VALUES 
    (101, 'X1', 1),
    (102, 'i6', 1),
    (103, 'Model S', 2),
    (104, 'Model X', 2),
    (105, 'Model 3', 2),
    (106, 'Nova', 3);


--3.Many-To-Many Relationship
CREATE TABLE Students (
    StudentID INT NOT NULL PRIMARY KEY,
    Name VARCHAR(50)
);


CREATE TABLE Exams (
    ExamID INT IDENTITY(101,1) PRIMARY KEY,
    Name VARCHAR(50)
);


CREATE TABLE StudentsExams (
    StudentID INT NOT NULL,
    ExamID INT NOT NULL,
    PRIMARY KEY (StudentID, ExamID),
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
    FOREIGN KEY (ExamID) REFERENCES Exams(ExamID)
);


INSERT INTO Students (StudentID, Name)
VALUES 
    (1, 'Mila'),
    (2, 'Toni'),
    (3, 'Ron');

INSERT INTO Exams ( Name)
VALUES 
    ( 'SpringMVC'),
    ( 'Neo4j'),
    ( 'Oracle 11g');


INSERT INTO StudentsExams (StudentID, ExamID)
VALUES 
    (1, 101),
    (1, 102),
    (2, 101),
    (2, 102),
    (2, 103),
    (3, 103);

--4.Self-Referencing
CREATE TABLE Teachers (
    TeacherID INT IDENTITY(101,1) PRIMARY KEY,
    Name VARCHAR(50),
    ManagerID INT,
    FOREIGN KEY (ManagerID) REFERENCES Teachers(TeacherID)
);
INSERT INTO Teachers ( Name, ManagerID)
VALUES 
    ( 'John', NULL),
    ( 'Maya', 106),
    ( 'Silvia', 106),
    ( 'Ted', 105),
    ( 'Mark', 101),
    ( 'Greta', 101);
SELECT * FROM [Teachers];

--5.Online Store Database

CREATE TABLE Cities (
    CityID INT NOT NULL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL
);


CREATE TABLE Customers (
    CustomerID INT NOT NULL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Birthday DATE,
    CityID INT,
    FOREIGN KEY (CityID) REFERENCES Cities(CityID)
);


CREATE TABLE ItemTypes (
    ItemTypeID INT NOT NULL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL
);


CREATE TABLE Items (
    ItemID INT NOT NULL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    ItemTypeID INT,
    FOREIGN KEY (ItemTypeID) REFERENCES ItemTypes(ItemTypeID)
);


CREATE TABLE Orders (
    OrderID INT NOT NULL PRIMARY KEY,
    CustomerID INT,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);


CREATE TABLE OrderItems (
    OrderID INT NOT NULL,
    ItemID INT NOT NULL,
    PRIMARY KEY (OrderID, ItemID),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ItemID) REFERENCES Items(ItemID)
);

--6. University Database

CREATE TABLE Majors (
    MajorID INT NOT NULL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL
);


CREATE TABLE Students (
    StudentID INT NOT NULL PRIMARY KEY,
    StudentNumber VARCHAR(50) NOT NULL,
    StudentName VARCHAR(100) NOT NULL,
    MajorID INT,
    FOREIGN KEY (MajorID) REFERENCES Majors(MajorID)
);


CREATE TABLE Subjects (
    SubjectID INT NOT NULL PRIMARY KEY,
    SubjectName VARCHAR(100) NOT NULL
);


CREATE TABLE Agenda (
    StudentID INT NOT NULL,
    SubjectID INT NOT NULL,
    PRIMARY KEY (StudentID, SubjectID),
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
    FOREIGN KEY (SubjectID) REFERENCES Subjects(SubjectID)
);


CREATE TABLE Payments (
    PaymentID INT NOT NULL PRIMARY KEY,
    PaymentDate DATE NOT NULL,
    PaymentAmount DECIMAL(10, 2) NOT NULL,
    StudentID INT,
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID)
);

--9.
SELECT MountainRange, PeakName, Elevation
FROM Peaks
Join Mountains on Peaks.MountainId=Mountains.Id
WHERE MountainRange = 'Rila'
ORDER BY Elevation DESC;



